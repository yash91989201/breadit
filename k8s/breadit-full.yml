# starting all services first so pods can access it
---
# service to expose frontend internally in cluster
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: breadit
spec:
  type: NodePort
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
      nodePort: 32000
---
#  service to expose database internally
apiVersion: v1
kind: Service
metadata:
  name: db-service
  namespace: breadit
spec:
  type: ClusterIP
  selector:
    app: mysql-db
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
# starting deployments
---
#  frontend deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: breadit
spec:
  replicas: 4
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: web-server
          image: yash6370/breadit
          ports:
            - containerPort: 3000
          env:
            - name: NEXTAUTH_URL
              value: "breadit.devopsprojects.pro"
            - name: NEXTAUTH_SECRET
              value: ""
            - name: DATABASE_URL
              value: ""
            - name: GOOGLE_CLIENT_ID
              value: ""
            - name: GOOGLE_CLIENT_SECRET
              value: ""
            - name: UPLOADTHING_SECRET
              value: ""
            - name: UPLOADTHING_APP_ID
              value: ""
            - name: UPSTASH_REDIS_REST_URL
              value: ""
            - name: UPSTASH_REDIS_REST_TOKEN
              value: ""
---
#  database deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-deployment
  namespace: breadit
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql-db
  template:
    metadata:
      labels:
        app: mysql-db
    spec:
      containers:
        - name: database
          image: mysql:latest
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_DATABASE
              value: "mydb"
            - name: MYSQL_ROOT_PASSWORD
              value: "password"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: breadit-ingress
  namespace: breadit
  annotations:
    # kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: instance
    alb.ingress.kubernetes.io/tags: env=dev,team=uat
    alb.ingress.kubernetes.io/group.name: devops-project.breadit
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:706253511348:certificate/1c38e5e9-31fc-4e0d-8e16-f30066a950b8
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/ssl-redirect: "443"

spec:
  ingressClassName: alb
  rules:
    - host: breadit.devopsprojects.pro
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend-service
                port:
                  number: 3000
